#!/bin/bash

# Copyright 2021 Flant JSC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


source /deckhouse/shell_lib.sh

function __config__() {
  cat << EOF
    configVersion: v1
    onStartup: 1
    schedule:
    - group: main
      queue: /modules/$(module::name::kebab_case)/helm_releases
      crontab: "*/20 * * * *"
EOF
}

function __on_startup() {
  cluster_version=$(values::get global.discovery.kubernetesVersion)
  if semver::gt "$cluster_version" "1.22" ; then
    return 0
  fi

  if metrics_from_prometheus="$(curl -s --connect-timeout 10 --max-time 10 -k -XGET -H "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" "https://prometheus.d8-monitoring:9090/api/v1/query?query=resource_versions_compatibility")"; then
    metrics="$(jq '.data.result[] |
    {
      "name": "resource_versions_compatibility",
      "set": (.value[1] | tonumber),
      "group": "/modules/'$(module::name::kebab_case)'/metrics",
      "labels": {
        "helm_release_name": .metric.helm_release_name,
        "resource_name": .metric.resource_name,
        "kind": .metric.kind,
        "api_version": .metric.api_version,
        "namespace": .metric.namespace
      }
    }
    ' <<< "$metrics_from_prometheus")"

    echo -e "$metrics" >> $METRICS_PATH
  fi
}

function __main__() {
  unsupported_versions='
    {
      "MutatingWebhookConfiguration": {
        "admissionregistration.k8s.io/v1beta1": ""
      },
      "ValidatingWebhookConfiguration": {
        "admissionregistration.k8s.io/v1beta1": ""
      },
      "CustomResourceDefinition": {
        "apiextensions.k8s.io/v1beta1": ""
      },
      "Ingress": {
        "extensions/v1beta1": "",
        "networking.k8s.io/v1beta1": ""
      },
      "IngressClass": {
        "networking.k8s.io/v1beta1": ""
      },
      "ClusterRole": {
        "rbac.authorization.k8s.io/v1beta1": ""
      },
      "ClusterRoleBinding": {
        "rbac.authorization.k8s.io/v1beta1": ""
      },
      "Role": {
        "rbac.authorization.k8s.io/v1beta1": ""
      },
      "RoleBinding": {
        "rbac.authorization.k8s.io/v1beta1": ""
      },
      "PriorityClass": {
        "scheduling.k8s.io/v1beta1": ""
      },
      "CSIDriver": {
        "storage.k8s.io/v1beta1": ""
      },
      "CSINode": {
        "storage.k8s.io/v1beta1": ""
      },
      "StorageClass": {
        "storage.k8s.io/v1beta1": ""
      },
      "VolumeAttachment": {
        "storage.k8s.io/v1beta1": ""
      }
    }
  '


  HELM_HOST=""
  metrics=""

  # helm 2
  namespaces="$(kubectl get configmaps -A -l OWNER=TILLER --no-headers | awk '{print $1}' | uniq)"
  for namespace in $namespaces; do
    if [ "$namespace" == "d8-system" ]; then
      continue
    fi
    if release_names="$(kubectl -n "$namespace" get configmaps -l OWNER=TILLER --no-headers --show-labels | grep DEPLOYED | sed 's/,\|=/ /g' | awk '{print $7}' | sort | uniq)"; then
      for release_name in $release_names; do
        if manifest="$(helm2 --tiller-namespace "$namespace" get manifest "$release_name" 2>/dev/null | yq read -d"*" -j -)"; then
          metrics="$metrics\n$(jq -rc --arg release_name "$release_name" --argjson d "$unsupported_versions" '
            .[] | select(.kind != null) |
            {
              "name": "resource_versions_compatibility",
              "set": 0,
              "group": "/modules/'$(module::name::kebab_case)'/metrics",
              "labels": {
                "helm_release_name": $release_name,
                "resource_name": .metadata.name,
                "kind": .kind,
                "api_version": .apiVersion,
                "namespace": .metadata.namespace
              }
            }
            | . as $in
            | if $d[.labels.kind] != null then if $d[$in.labels.kind] | has($in.labels.api_version) then .set = 1 else . end else . end
          ' <<< "$manifest")"
        else
          echo "WARNING: <helm2 --tiller-namespace $namespace get manifest $release_name> failed"
        fi
      done
    fi
  done

  # helm 3
  namespaces="$(kubectl get secrets -A -l owner=helm --no-headers | awk '{print $1}' | uniq)"
  for namespace in $namespaces; do
    if release_names="$(kubectl -n "$namespace" get secret -l owner=helm,status=deployed --no-headers --show-labels | sed 's/,\|=/ /g' | awk '{print $8}' | sort | uniq)"; then
      for release_name in $release_names; do
        if manifest="$(helm --namespace "$namespace" get manifest "$release_name" 2>/dev/null | yq read -d"*" -j -)"; then
          metrics="$metrics\n$(jq -rc --arg release_name "$release_name" --argjson d "$unsupported_versions" '
            .[] | select(.kind != null) |
            {
              "name": "resource_versions_compatibility",
              "set": 0,
              "group": "/modules/'$(module::name::kebab_case)'/metrics",
              "labels": {
                "helm_release_name": $release_name,
                "resource_name": .metadata.name,
                "kind": .kind,
                "api_version": .apiVersion,
                "namespace": .metadata.namespace
              }
            }
            | . as $in
            | if $d[.labels.kind] != null then if $d[$in.labels.kind] | has($in.labels.api_version) then .set = 1 else . end else . end
          ' <<< "$manifest")"
        else
          echo "WARNING: <helm --namespace $namespace get manifest $release_name> failed"
        fi
      done
    fi
  done

  echo -e "$metrics" >> $METRICS_PATH
}

hook::run "$@"
